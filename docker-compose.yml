version: '3.8'

services:
  # Main FastAPI application server
  api:
    build:
      context: .
      dockerfile: Dockerfile
    image: visionvend-api:latest
    container_name: visionvend-api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mqtt:
        condition: service_healthy
    environment:
      - CONFIG_PATH=/app/config/config.yaml
      - DATABASE_URL=postgresql://visionvend:${POSTGRES_PASSWORD}@postgres:5432/visionvend
      - REDIS_URL=redis://redis:6379/0
      - MQTT_BROKER=mqtt
      - MQTT_PORT=1883
      - STRIPE_API_KEY=${STRIPE_API_KEY}
      - HMAC_SECRET=${HMAC_SECRET}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - VAPID_PRIVATE_KEY=${VAPID_PRIVATE_KEY}
      - VAPID_PUBLIC_KEY=${VAPID_PUBLIC_KEY}
      - VAPID_CONTACT_EMAIL=${VAPID_CONTACT_EMAIL}
      - SERVICE_ACCOUNT_PATH=/app/secrets/service-account.json
      - GOOGLE_SHEET_ID=${GOOGLE_SHEET_ID}
      - LOG_LEVEL=INFO
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
      - ./secrets:/app/secrets:ro
      - ./data:/app/data
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - visionvend-network

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: visionvend-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=visionvend
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=visionvend
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts/postgres:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U visionvend"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - visionvend-network

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: visionvend-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - visionvend-network

  # Mosquitto MQTT broker
  mqtt:
    image: eclipse-mosquitto:2
    container_name: visionvend-mqtt
    restart: unless-stopped
    volumes:
      - ./config/mosquitto:/mosquitto/config
      - mosquitto-data:/mosquitto/data
      - mosquitto-log:/mosquitto/log
    ports:
      - "1883:1883"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "mosquitto_sub", "-t", "$$SYS/#", "-C", "1", "-i", "healthcheck", "-W", "3"]
      interval: 15s
      timeout: 5s
      retries: 3
    networks:
      - visionvend-network

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: visionvend-prometheus
    restart: unless-stopped
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - visionvend-network

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: visionvend-grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    volumes:
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=grafana.visionvend.local
      - GF_SMTP_ENABLED=${GRAFANA_SMTP_ENABLED:-false}
      - GF_SMTP_HOST=${GRAFANA_SMTP_HOST:-smtp.example.com}
      - GF_SMTP_USER=${GRAFANA_SMTP_USER}
      - GF_SMTP_PASSWORD=${GRAFANA_SMTP_PASSWORD}
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - visionvend-network

  # Node exporter for host metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: visionvend-node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - visionvend-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: visionvend-nginx
    restart: unless-stopped
    volumes:
      - ./config/nginx:/etc/nginx/conf.d
      - ./static:/usr/share/nginx/html
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - grafana
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - visionvend-network

  # Alembic migrations (runs once and exits)
  migrations:
    build:
      context: .
      dockerfile: Dockerfile
    image: visionvend-api:latest
    container_name: visionvend-migrations
    restart: "no"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://visionvend:${POSTGRES_PASSWORD}@postgres:5432/visionvend
    command: ["alembic", "upgrade", "head"]
    volumes:
      - ./migrations:/app/migrations
    networks:
      - visionvend-network

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: visionvend-backup
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 0 * * *}
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./scripts/backup.sh:/backup.sh
      - backup-data:/backups
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "chmod +x /backup.sh && 
       echo \"$${BACKUP_SCHEDULE} /backup.sh\" > /etc/crontabs/root && 
       crond -f -d 8"
    networks:
      - visionvend-network

volumes:
  postgres-data:
  redis-data:
  mosquitto-data:
  mosquitto-log:
  prometheus-data:
  grafana-data:
  nginx-logs:
  backup-data:

networks:
  visionvend-network:
    driver: bridge
